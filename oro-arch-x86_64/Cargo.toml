[package]
name = "oro-arch-x86_64"
version.workspace = true
description = "Oro operating system x86_64 architecture kernel implementation"
publish = false
edition = "2024"
authors = [
	"Josh Junon (https//github.com/qix-)"
]
homepage = "https://oro.sh"
repository = "https://github.com/oro-os/kernel"
license = "MPL-2.0"
autobins = false

build = "build.rs"

[features]
default = []

# Forces the kernel to only run on the bootstrap processor,
# regardless of what's in the ACPI tables.
force-singlecore = []

# Forces the kernel to use a big IRQ stack, even in release mode.
# This is the default in debug mode.
big-irq-stack = []

# In cases where the stack or other memory structures are being
# munged and are otherwise hard to debug (especially in cases where
# triple faults are occurring without any core dump output), enabling
# this flag may be able to get information out on the wire. It's not
# the default since it isn't as robust nor maintainable, and doesn't
# flow through the default `panic!()` plumbing.
simple_core_dump = []

[lib]
path = "src/lib.rs"

[[bin]]
name = "oro-kernel-x86_64"
path = "entry.rs"
doc = false

[dependencies]
oro-kernel.workspace = true
oro-boot-protocol.workspace = true
oro-mem.workspace = true
oro-macro.workspace = true
oro-elf.workspace = true
oro-debug.workspace = true
oro-dbgutil.workspace = true
oro-acpi.workspace = true
oro-sync.workspace = true
oro.workspace = true
oro-pci.workspace = true
oro-type.workspace = true

# Work around non-composability of `test` profile and global allocator conflicts in unit test runner.
[dev-dependencies]
oro-mem = { workspace = true, features = ["std-alloc"] }

[lints]
workspace = true
