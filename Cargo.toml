[workspace.package]
description = "The Oro Operating System kernel project"
homepage = "https://oro.sh"
repository = "https://github.com/oro-os/kernel"
license = "MPL-2.0"
version = "0.0.0"

[workspace]
resolver = "2"
default-members = [
	"oro-bootloader-limine",
	"oro-kernel",
	"oro-arch-x86_64",
	"oro-arch-aarch64",
]

members = [
	"oro-acpi",
	"oro-acpica-sys",
	"oro-arch-aarch64",
	"oro-arch-x86_64",
	"oro-boot",
	"oro-boot-protocol",
	"oro-bootloader-limine",
	"oro-mem",
	"oro-elf",
	"oro-macro",
	"oro-macro-proc",
	"oro-kernel",
	"oro-debug",
	"oro-debug-pl011",
	"oro-debug-uart16550",
	"oro-type",
	"oro-dtb",
	"oro-dbgutil",
	"oro-sync",
	"oro-pci",
	"oro",
]

[workspace.dependencies]
oro-acpi.path = "oro-acpi"
oro-acpica-sys.path = "oro-acpica-sys"
oro-arch-aarch64.path = "oro-arch-aarch64"
oro-arch-x86_64.path = "oro-arch-x86_64"
oro-boot.path = "oro-boot"
oro-boot-protocol.path = "oro-boot-protocol"
oro-mem.path = "oro-mem"
oro-macro.path = "oro-macro"
oro-macro-proc.path = "oro-macro-proc"
oro-elf.path = "oro-elf"
oro-kernel.path = "oro-kernel"
oro-debug.path = "oro-debug"
oro-debug-pl011.path = "oro-debug-pl011"
oro-debug-uart16550.path = "oro-debug-uart16550"
oro-type.path = "oro-type"
oro-dtb.path = "oro-dtb"
oro-dbgutil.path = "oro-dbgutil"
oro-sync.path = "oro-sync"
oro-pci.path = "oro-pci"
oro.path = "oro"

limine = "0.3.1"
uart_16550 = "0.3.0"
volatile-register = "0.2.2"
buddy_system_allocator = "0.11.0"
hashbrown = { version = "0.15.2", default-features = false, features = ["nightly", "inline-more", "allocator-api2"] }
foldhash = { version = "0.1.4", default-features = false }
nolock = { version = "0.4.1", default-features = false, features = ["queues"] }

bindgen = "0.71.1"
syn = { version = "2.0.60", features = ["full", "printing"] }
quote = "1.0.36"
proc-macro2 = { version = "1.0.81", features = ["proc-macro"] }
convert_case = "0.6.0"

[workspace.lints.rust]
missing_docs = "warn"
elided_lifetimes_in_paths = "deny"

[workspace.lints.rustdoc]
private_doc_tests = "allow"

[workspace.lints.clippy]
all = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
missing_docs_in_private_items = "warn"
integer_division = "warn"
module_name_repetitions = "allow"
verbose_bit_mask = "allow"
too_many_lines = "allow"
missing_errors_doc = "allow"
struct_field_names = "allow"
items_after_statements = "allow"
cast_possible_truncation = "allow" # TODO(qix-): Temporary until the virt/phys types land.
assertions_on_constants = "allow"
new_without_default = "allow"
needless_doctest_main = "allow"
tabs_in_doc_comments = "allow"
redundant_closure_for_method_calls = "allow"

[profile.dev]
panic = "abort"            # Use "abort" panic strategy
debug = "full"             # Full debugging symbols

[profile.release]
opt-level = 3              # Maximum optimizations
lto = "fat"                # Perform LTO across all crates
codegen-units = 1          # Reduce number of codegen units to increase optimizations.
strip = true               # Strip symbols from binary
incremental = false        # Disable incremental building
panic = "abort"            # Use "abort" panic strategy
debug = 0                  # Do not generate debug information

[profile.relwithdebinfo]
inherits = "release"
debug = "full"             # Full debugging symbols
strip = false              # Don't strip symbols from binary
