name: Build and Lint
on:
  push:
    branches:
      - master
  pull_request:

env:
  RUST_BACKTRACE: full

jobs:
  lint-rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - uses: ./.github/actions/rust
      - name: Lint (rustfmt)
        run: cargo fmt --all -- --check
  lint-clippy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        profile: ["dev", "release"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - uses: ./.github/actions/rust
      - name: Lint (clippy) [common]
        run: cargo oro-clippy --profile ${{ matrix.profile }} -- -D warnings
      - name: Lint (clippy) [x86_64]
        run: cargo oro-clippy-x86_64 --profile ${{ matrix.profile }} -- -D warnings
      - name: Lint (clippy) [aarch64]
        run: cargo oro-clippy-aarch64 --profile ${{ matrix.profile }} -- -D warnings
  lint-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - uses: ./.github/actions/rust
      - name: Lint (rustdoc)
        run: env RUSTFLAGS="-D warnings" RUSTDOCFLAGS="-D rustdoc::all" cargo oro-doc
  lint-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Lint (python)
        run: |
          pip install black
          black --check .
  build-kernel-x86_64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        profile: ["dev", "release"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - uses: ./.github/actions/rust
      - name: Build
        run: cargo kernel-x86_64 --profile ${{ matrix.profile }}
  build-limine-x86_64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        profile: ["dev", "release"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - uses: ./.github/actions/rust
      - name: Build
        run: cargo limine-x86_64 --profile ${{ matrix.profile }}
  build-kernel-aarch64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        profile: ["dev", "release"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - uses: ./.github/actions/rust
      - name: Build
        run: cargo kernel-aarch64 --profile ${{ matrix.profile }}
  build-limine-aarch64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        profile: ["dev", "release"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - uses: ./.github/actions/rust
      - name: Build
        run: cargo limine-aarch64 --profile ${{ matrix.profile }}
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - uses: ./.github/actions/rust
      - name: Test
        run: |
          cargo oro-test --target $(rustc -vV | sed -n 's|host: ||p')
  boot-protocol-header:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - uses: ./.github/actions/rust
      - run: rm -f ${CARGO_TARGET_DIR:-target}/oro-boot.h
      - name: Generate Boot Protocol C/C++ Header
        run: cargo build -p oro-boot-protocol --release
        env:
          ORO_BUILD_PROTOCOL_HEADER: 1
      - name: Check
        run: bash ./oro-boot-protocol/test-boot-header.sh
